[build-system]
requires = [
    "hatchling>=1.10.0",
    "hatch-fancy-pypi-readme"
]
build-backend = "hatchling.build"

[project]
name = "awkward"
version = "2.8.1"
description = "Manipulate JSON-like data with NumPy-like idioms."
license = { text = "BSD-3-Clause" }
requires-python = ">=3.9"
authors = [
    { name = "Jim Pivarski", email = "jpivarski@gmail.com" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development",
    "Topic :: Utilities",
]
dependencies = [
    "awkward_cpp==45",
    "importlib_metadata>=4.13.0;python_version < \"3.12\"",
    "numpy>=1.18.0",
    "packaging",
    "typing_extensions>=4.1.0; python_version < \"3.11\"",
    "fsspec>=2022.11.0"
]
dynamic = [
    "readme"
]

[project.entry-points.numba_extensions]
init = "awkward.numba:_register"

[project.urls]
"Bug Tracker" = "https://github.com/scikit-hep/awkward-1.0/issues"
"Chat" = "https://gitter.im/Scikit-HEP/awkward-array"
"Discussions" = "https://github.com/scikit-hep/awkward-1.0/discussions"
"Documentation" = "https://awkward-array.org"
"Homepage" = "https://github.com/scikit-hep/awkward-1.0"
"Releases" = "https://github.com/scikit-hep/awkward-1.0/releases"
"Source Code" = "https://github.com/scikit-hep/awkward-1.0"

[tool.hatch.build.targets.wheel]
packages = ["src/awkward"]
artifacts = [
    "/src/awkward/_connect/header-only",
    "/src/awkward/_connect/cuda/_kernel_signatures.py"
]

[tool.hatch.build.targets.wheel.force-include]
"./juliapkg.json" = "awkward/juliapkg.json"

[tool.hatch.build.targets.wheel.hooks.version]
path = "src/awkward/_version.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/tests-cuda",
    "/docs-img",
    "/docs",
    "/CITATION.cff",
    "/CONTRIBUTING.md",
    "/README.md",
    "/juliapkg.json",
    "/requirements-test-full.txt",
    "/requirements-test-minimal.txt"
]
artifacts = [
    "/tests-cuda-kernels",
    "/src/awkward/_connect/header-only",
    "/src/awkward/_connect/cuda/_kernel_signatures.py"
]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
text = """
<a href="https://github.com/scikit-hep/awkward-1.0">
    <img src="https://github.com/scikit-hep/awkward-1.0/raw/main/docs-img/logo/logo-300px.png">
</a>
"""

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"
start-after = "<!-- end-logo -->"
end-before = "<!-- readme-pypi-ignore-after -->"

[tool.pytest.ini_options]
minversion = "6.0"
norecursedirs = [
    "src",
    "pybind11",
    "rapidjson",
    "studies",
]
addopts = [
    "-ra",
    "--showlocals",
    "--strict-markers",
    "--strict-config",
]
xfail_strict = true
filterwarnings = [
    "error",
    "ignore:the imp module is deprecated in favour of importlib:DeprecationWarning",
    "ignore:The NumPy module was reloaded:UserWarning",
    "ignore:.*np\\.MachAr.*:DeprecationWarning",
    "ignore:module 'sre_.*' is deprecated:DeprecationWarning",
    "ignore:Jitify is performing a one-time only warm-up",
]
log_cli_level = "info"

[tool.pylint]
py-version = "3.9"
jobs = "0"
ignore-paths = [
    "src/awkward/_typeparser/generated_parser.py",
]

[tool.pylint.reports]
output-format = "colorized"

[tool.pylint.messages_control]
enable = [
    "useless-suppression",
]
disable = [
    "abstract-method",
    "arguments-differ",
    "attribute-defined-outside-init",
    "bad-super-call",
    "broad-except",
    "cell-var-from-loop",
    "chained-comparison",
    "consider-using-f-string",
    "consider-using-max-builtin",
    "consider-using-min-builtin",
    "cyclic-import",
    "duplicate-code",
    "exec-used",
    "fixme",
    "global-statement",
    "import-error",
    "import-outside-toplevel",
    "inconsistent-return-statements",
    "invalid-class-object",
    "invalid-name",
    "invalid-unary-operand-type",
    "keyword-arg-before-vararg",
    "line-too-long",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "no-else-break",
    "no-else-raise",
    "no-else-return",
    "no-member",
    "no-name-in-module",
    "no-value-for-parameter",
    "possibly-used-before-assignment", # TODO
    "property-with-parameters",
    "protected-access",
    "raise-missing-from",
    "redefined-builtin",
    "redefined-outer-name",
    "simplifiable-if-expression",
    "super-init-not-called",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-function-args",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-positional-arguments",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "unbalanced-tuple-unpacking",
    "undefined-loop-variable",
    "ungrouped-imports",
    "unidiomatic-typecheck",
    "unnecessary-comprehension",
    "unnecessary-lambda",
    "unreachable",
    "unsubscriptable-object",
    "unused-argument",
    "unused-import",
    "unused-variable",
    "use-a-generator",
    "use-implicit-booleaness-not-len",
    "used-before-assignment", # TODO
    "wrong-import-order",
    "wrong-import-position",
]

[tool.mypy]
files = ["src/awkward/**/*.py"]
plugins = [
    "numpy.typing.mypy_plugin"
]
python_version = "3.11"
ignore_errors = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    'awkward._nplikes.*',
    'awkward._namedaxis',
    'awkward._behavior.*',
    'awkward._backends.*',
    'awkward._meta.*',
    'awkward._errors',
    'awkward._dispatch',
    'awkward.forms.*',
    'awkward.types.*',
    'awkward.index',
]
ignore_errors = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    'awkward.types._awkward_datashape_parser'
]
ignore_errors = true
ignore_missing_imports = true

[tool.ruff]
extend-exclude = [
    "studies",
    "pybind11",
    "rapidjson",
    "docs-*",
    "src/awkward/_typeparser/generated_parser.py",
    "src/awkward/types/_awkward_datashape_parser.py",
    "src/awkward/_connect/cuda/_kernel_signatures.py",
]

[tool.ruff.lint]
extend-select = [
    "B",           # flake8-bugbear
    "I",           # isort
    "C4",          # flake8-comprehensions
    "ISC",         # flake8-implicit-str-concat
    "G",           # flake8-logging-format
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "RUF",         # Ruff-specific
    "T20",         # flake8-print
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
    "EXE",         # flake8-executable
    "NPY",         # NumPy specific rules
    "TID251",      # flake8-tidy-imports
]
ignore = [
    "E501",    # Line too long
    "UP030",   # {0} -> {}
    "PLR",     # Design related pylint codes
    "PT011",   # Exception too broad
    "NPY002",  # Replace legacy `np.random` call with `np.random.Generator`
    "PLW2901", # Outer for loop variable  overwritten by inner assignment target
    "PLW0603", # Using the global statement to update is discouraged
    "PLC1901", # x == "" can be simplified to not x (empty string is falsey)
    "ISC001",  # Conflicts with the formatter in 0.1.2
]
typing-modules = ["awkward._typing"]
external = []
mccabe.max-complexity = 100
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"dev/*" = ["T20", "TID251"]
"src/awkward/numba/*" = ["TID251"]
"src/awkward/_typing.py" = ["TID251"]
"src/awkward/_errors.py" = ["TID251"]
"src/awkward/errors.py" = ["TID251"]
"src/awkward/_connect/*" = ["TID251"]
"src/awkward/__init__.py" = ["E402", "F401", "F403", "I001"]
"src/awkward/_ext.py" = ["F401"]
"src/awkward/operations/__init__.py" = ["F401", "F403"]
"src/awkward/operations/str/__init__.py" = ["F401", "F403", "I001"]
"src/awkward/_nplikes/*" = ["TID251"]
"src/awkward/_operators.py" = ["TID251"]
"tests*/*" = ["T20", "TID251"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"numpy".msg = "Use `numpy = ak._nplikes.Numpy.instance()` instead"
"jax".msg = "Use `jax = ak._nplikes.Jax.instance()` instead"
"cupy".msg = "Use `cupy = ak._nplikes.Cupy.instance()` instead"
